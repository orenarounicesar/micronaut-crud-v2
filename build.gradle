// build.gradle
plugins {
    id("io.micronaut.application") version "4.3.5"
    id("io.micronaut.aot") version "4.3.5"
    id("java")
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = "com.example"
version = "0.1"

def micronautVersion = "4.3.5"
def javaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.micronaut:micronaut-http-server-netty:$micronautVersion")
    implementation("io.micronaut:micronaut-runtime:$micronautVersion")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")

    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:$micronautVersion")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari:$micronautVersion")
    runtimeOnly("com.mysql:mysql-connector-j")
    runtimeOnly("org.yaml:snakeyaml")
    runtimeOnly("ch.qos.logback:logback-classic")

    annotationProcessor("io.micronaut:micronaut-inject-java:$micronautVersion")
    annotationProcessor("io.micronaut.data:micronaut-data-processor:$micronautVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

application {
    mainClass.set("com.example.Application")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    aot {
        optimizeServiceLoading.set(true)
        convertYamlToJava.set(true)
        precomputeOperations.set(true)
        cacheEnvironment.set(true)
        deduceEnvironment.set(true)
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                "Main-Class": application.mainClass.get()
        )
    }
}

tasks.named("shadowJar") {
    mergeServiceFiles()
    manifest {
        attributes("Main-Class": application.mainClass.get())
    }
}

tasks.build {
    dependsOn(tasks.shadowJar)
}